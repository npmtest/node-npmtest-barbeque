{"/home/travis/build/npmtest/node-npmtest-barbeque/test.js":"/* istanbul instrument in package npmtest_barbeque */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-barbeque/lib.npmtest_barbeque.js":"/* istanbul instrument in package npmtest_barbeque */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_barbeque = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_barbeque = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-barbeque/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-barbeque && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_barbeque */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_barbeque\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_barbeque.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_barbeque.rollup.js'] =\n            local.assetsDict['/assets.npmtest_barbeque.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_barbeque.__dirname + '/lib.npmtest_barbeque.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-barbeque/node_modules/barbeque/index.js":"/*\n * index.js\n */\n\n'use strict';\n\nexports = module.exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-barbeque/node_modules/barbeque/lib/index.js":"/*\n * lib/index.js\n */\n\n'use strict';\n\nvar assert = require('assert'),\n    events = require('events'),\n    util = require('util');\n\nvar _ = require('lodash');\n\nvar C = require('./constant');\n\nfunction Barbeque(config) {\n  assert(_.isPlainObject(config) || _.isUndefined(config),\n         '\"config\" must be a plain object or undefined.');\n\n  if (_.isUndefined(config)) { config = {}; }\n\n  assert((_.isString(config.host) && !_.isEmpty(config.host)) || _.isUndefined(config.host),\n         '\"config.host\" must be a non-empty string or undefined.');\n  assert((_.isNumber(config.port) && (parseInt(config.port, 10) === config.port)) || _.isUndefined(config.port),\n         '\"config.port\" must be an integer or undefined.');\n  assert((_.isString(config.password) && !_.isEmpty(config.password)) || _.isNull(config.password) || _.isUndefined(config.password),\n         '\"config.password\" must be a non-empty string or null/undefined.');\n  assert((_.isString(config.namespace) && !_.isEmpty(config.namespace)) || _.isNull(config.namespace) || _.isUndefined(config.namespace),\n         '\"config.namespace\" must be a non-empty string or null/undefined.');\n  assert((_.isString(config.prefix) && !_.isEmpty(config.prefix)) || _.isUndefined(config.prefix),\n         '\"config.prefix\" must be a non-empty string or undefined.');\n\n  if (_.isEmpty(config)) { config = {}; }\n  if (_.isEmpty(config.host)) { config.host = C.DEFAULT_HOST; }\n  if (_.isUndefined(config.port)) { config.port = C.DEFAULT_PORT; }\n  if (_.isEmpty(config.password)) { config.password = C.DEFAULT_PASSWORD; }\n  if (_.isEmpty(config.namespace)) { config.namespace = C.DEFAULT_NAMESPACE; }\n  if (_.isEmpty(config.prefix)) { config.prefix = C.DEFAULT_PREFIX; }\n\n  this._config = config;\n  this._builder = new (require('./builder'))(config.namespace, config.prefix);\n  this._worker = new (require('./worker'))(this);\n\n  this.on('error', function () {});\n}\n\nutil.inherits(Barbeque, events.EventEmitter);\n\nBarbeque.prototype.admin = function (options, cb) {\n  assert(_.isObject(options) || _.isUndefined(options), '\"options\" must be an object or undefined.');\n  assert(_.isFunction(cb) || _.isUndefined(cb), '\"cb\" must be a function or undefined.')\n\n  return new (require('../admin'))(options, cb);\n};\n\nBarbeque.prototype.create = function (type, data) {\n  assert(_.isString(type) && !_.isEmpty(type), '\"type\" must be a non-empty string.');\n\n  return new (require('./task'))(this, type, data);\n};\n\nBarbeque.prototype.listen = function () {\n  if (!this._worker) {\n    this._worker = new (require('./worker'))(this);\n  }\n\n  this._worker.listen();\n\n  return this;\n};\n\nBarbeque.prototype.process = function (type, fn) {\n  assert(_.isString(type) && !_.isEmpty(type), '\"type\" must be a non-empty string.');\n  assert(_.isFunction(fn), '\"fn\" must be a function.');\n\n  this._worker.watch(type, fn);\n\n  return this;\n};\n\nBarbeque.prototype.processAll = function (nestableObject) {\n  assert(_.isObject(nestableObject), '\"nestableObject\" must be an object type.');\n\n  var self = this,\n      flattenObject = require('./helper').flattenDot(nestableObject),\n      n = _.size(flattenObject);\n\n  _.each(_.keys(flattenObject), function (type, i) {\n    var fn = flattenObject[type],\n        skipProcess = (i + 1 < n);\n\n    assert(_.isString(type) && !_.isEmpty(type), '\"type\" must be a non-empty string.');\n    assert(_.isFunction(fn), '\"fn\" must be a function (type: ' + type + ')');\n\n    self._worker.watch(type, fn, skipProcess);\n  });\n\n  return this;\n};\n\n// TODO\nBarbeque.prototype.query = function (query, cb, queryDetail) {\n  if (_.isFunction(query) && _.isUndefined(cb)) {\n    detail = cb;\n    cb = query;\n    query = void 0;\n  }\n\n  assert(_.isFunction(cb),\n         '\"cb\" must be a function.');\n  assert(_.isBoolean(queryDetail) || _.isUndefined(queryDetail),\n         '\"queryDetail\" must be a boolean.');\n\n  if (_.isEmpty(query)) {\n    // Find all\n    cb(null, ['TASK1', 'TASK2', 'TASK3']);\n  } else if (_.isArray(query)) {\n    // Find many\n    cb(null, ['TASK1', 'TASK2']);\n  } else if (_.isString(query)) {\n    // Find one\n    cb(null, 'TASK');\n  } else {\n    cb(new Error('Invalid query: ' + JSON.stringify(query)));\n  }\n};\n\n// TODO\nBarbeque.prototype.queryDetail = function (query, cb) {\n  return this.query(query, cb, true);\n};\n\nBarbeque.prototype.run = function (fn, data, cb) {\n  assert(_.isFunction(fn), '\"fn\" must be a funciton.');\n\n  var self = this,\n      currentTime = new Date();\n\n  fn({\n    id: null,\n    type: null,\n    data: data,\n    createdAt: currentTime,\n    updatedAt: currentTime,\n    // extra\n    create: create,\n    log: log,\n    progress: progress\n  }, cb);\n\n  function create() {\n    return self.create.apply(self, arguments);\n  }\n\n  function log() {\n    console.info('[LOG] ' + util.format.apply(null, arguments));\n  }\n\n  function progress(completed, total) {\n    console.info('[PROGRESS] %s of %s', completed, total);\n  }\n};\n\n// TODO\nBarbeque.prototype.update = function (taskId, task, cb) {\n  cb(null, taskId);\n};\n\n// Public API\nexports = module.exports = Barbeque;\n","/home/travis/build/npmtest/node-npmtest-barbeque/node_modules/barbeque/lib/constant.js":"/*\n * lib/constant.js\n */\n\n'use strict';\n\nexports.DEFAULT_HOST = 'localhost';\nexports.DEFAULT_PORT = 6379;\nexports.DEFAULT_PASSWORD = null;\nexports.DEFAULT_NAMESPACE = null;\nexports.DEFAULT_PREFIX = 'bbq';\n\nexports.DEFAULT_TASK_ATTEMPTS = 0;\n\nexports.PRIORITY = {\n  LOW: 10,\n  NORMAL: 0,\n  MEDIUM: -5,\n  HIGH: -10,\n  CRITICAL: -15\n};\n\nexports.STATE = {\n  ACTIVE: 'active',\n  PROCESSING: 'processing',\n  COMPLETE: 'complete',\n  FAILED: 'failed',\n  INACTIVE: 'inactive'\n};\n","/home/travis/build/npmtest/node-npmtest-barbeque/node_modules/barbeque/admin/app.js":"/*\n * admin/app.js\n */\n\n'use strict';\n\nvar assert = require('assert'),\n    http = require('http'),\n    util = require('util');\n\nvar _ = require('lodash'),\n    express = require('express'),\n    hbs = require('hbs');\n\nvar pkg = require('../package');\n\nvar DEFAULT_HOST = 'localhost',\n    DEFAULT_PORT = 3000,\n    DEFAULT_PATH = '/',\n    DEFAULT_NAMESPACE = null,\n    STATIC_DIR = __dirname + '/static';\n\nfunction App(options, cb) {\n  if (_.isUndefined(options)) { options = {}; }\n\n  assert(_.isString(options.host) || _.isUndefined(options.host),\n         '\"host\" must be a string or undefined.');\n  assert(_.isNumber(options.port) || _.isUndefined(options.port),\n         '\"port\" must be a number or undefined.');\n  assert(_.isString(options.path) || _.isUndefined(options.path),\n         '\"path\" must be a string or undefined.');\n  assert(_.isString(options.namespace) || _.isUndefined(options.namespace),\n         '\"namespace\" must be a string or undefined.');\n\n  if (!_.isFunction(cb) || _.isUndefined(cb)) {\n    cb = function () {};\n  }\n\n  _.defaults(options, {\n    host: DEFAULT_HOST,\n    port: DEFAULT_PORT,\n    path: DEFAULT_PATH,\n    namespace: DEFAULT_NAMESPACE\n  });\n\n  // Path should not start or end with a slash.\n  options.path = options.path.replace(/^\\/+/, '').replace(/\\/+$/, '');\n\n  this._app = null;\n  this._bbq = null;\n\n  this._setupHandlebars();\n  this._runServer(options.host, options.port, options.path, cb);\n  this._subscribeBBQEvents(options.namespace);\n}\n\nApp.prototype._attachLocals = function (app) {\n  app.locals({\n    __versionBarbeque: pkg.version\n  });\n};\n\nApp.prototype._attachMiddleware = function (app, prefix) {\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'hbs');\n  app.use(express.favicon());\n  app.use(express.logger('dev'));\n  app.use(express.json());\n  app.use(express.urlencoded());\n  app.use(express.methodOverride());\n  app.use(app.router);\n  app.use((require('less-middleware'))({\n    src: '/less',\n    dest: '/css',\n    root: STATIC_DIR\n  }));\n  app.use(prefix + '/bower_components', express.static(STATIC_DIR + '/js/node_modules/bower_components'));\n  app.use(prefix + '/css', express.static(STATIC_DIR + '/css'));\n  app.use(prefix + '/img', express.static(STATIC_DIR + '/img'));\n  app.use(prefix + '/tpl/layout', express.static(STATIC_DIR + '/js/layout/templates'));\n  app.use(prefix + '/tpl/main', express.static(STATIC_DIR + '/js/main/templates'));\n  app.use(prefix + '/tpl/task', express.static(STATIC_DIR + '/js/task/templates'));\n  app.use(prefix + '/js/app.js', (require('browserify-middleware'))(STATIC_DIR + '/js/index.js'));\n\n  if ('development' === app.get('env')) {\n    app.use(express.errorHandler());\n  }\n};\n\nApp.prototype._attachRoutes = function (app, prefix) {\n  app.get(prefix || '/', function (req, res) {\n    res.render('index');\n  });\n};\n\nApp.prototype._subscribeBBQEvents = function (namespace) {\n  var self = this;\n\n  self._bbq = new (require('..'))({\n    namespace: namespace\n  }).on('active', function (task) {\n    self._socketio.onStateChange(task);\n  }).on('processing', function (task) {\n    self._socketio.onStateChange(task);\n  }).on('complete', function (task) {\n    self._socketio.onStateChange(task);\n  }).on('failed', function (task) {\n    self._socketio.onStateChange(task);\n  }).on('inactive', function (task) {\n    self._socketio.onStateChange(task);\n  }).listen();\n};\n\nApp.prototype._runServer = function (host, port, path, cb) {\n  var app = this._app = express(),\n      server = http.createServer(app),\n      io = (require('socket.io')).listen(server);\n\n  this._attachMiddleware(app, path);\n  this._attachRoutes(app, path);\n  this._attachLocals(app);\n  this._socketio = new (require('./socketio'))(this, io);\n\n  server.listen(port, host, function (err) {\n    if (err) { return cb(err); }\n    cb(null, util.format('http://%s:%d%s', host, port, path ? '/' + path : ''));\n  });\n};\n\nApp.prototype._setupHandlebars = function () {\n  hbs.registerHelper('json', function (context) {\n    return JSON.stringify(context);\n  });\n};\n\n// Public API\nexports = module.exports = App;\n","/home/travis/build/npmtest/node-npmtest-barbeque/node_modules/barbeque/admin/socketio.js":"/*\n * admin/socketio.js\n */\n\n'use strict';\n\nvar TASK_DETAIL_CHANNEL = 'task:detail',\n    TASK_LIST_CHANNEL = 'task:list',\n    TASK_UPDATE_CHANNEL = 'task:update';\n\nfunction Socket(app, io, socket) {\n  this._app = app;\n  this._io = io;\n  this._socket = socket;\n\n  this._addListeners();\n}\n\nSocket.prototype._addListeners = function () {\n  var self = this;\n\n  self._socket\n    .on(TASK_DETAIL_CHANNEL, function (taskId) {\n      self.sendTask(taskId);\n    })\n    .on(TASK_LIST_CHANNEL, function () {\n      self.sendAllTasks();\n    })\n    .on(TASK_UPDATE_CHANNEL, function (task) {\n      self.updateTask(task);\n    });\n};\n\nSocket.prototype._emit = function () {\n  this._socket.emit.apply(this._socket, arguments);\n};\n\nSocket.prototype.sendTask = function (taskId) {\n  var self = this;\n\n  self._app._bbq.query({\n    id: taskId\n  }, function (err, task) {\n    self._emit(TASK_DETAIL_CHANNEL, err && err.message, task);\n  });\n};\n\nSocket.prototype.sendAllTasks = function () {\n  var self = this;\n\n  self._app._bbq.query({}, function (err, tasks) {\n    self._emit(TASK_LIST_CHANNEL, err && err.message, tasks);\n  });\n};\n\nSocket.prototype.updateTask = function (task) {\n  var self = this;\n\n  self._app._bbq.update(task.id, task, function (err, success) {\n    self._emit(TASK_UPDATE_CHANNEL, err && err.message, task);\n  });\n};\n\nfunction Socketio(app, io) {\n  this._app = app;\n  this._io = io;\n\n  io.sockets.on('connection', function (socket) {\n    new Socket(app, io, socket);\n  });\n}\n\nSocketio.prototype.onStateChange = function (task) {\n  this._io.sockets.emit(TASK_UPDATE_CHANNEL, null, task);\n};\n\n// Public API\nexports = module.exports = Socketio;\n","/home/travis/build/npmtest/node-npmtest-barbeque/node_modules/barbeque/lib/builder.js":"/*\n * lib/builder.js\n */\n\n'use strict';\n\nvar assert = require('assert'),\n    util = require('util');\n\nvar _ = require('lodash');\n\nvar C = require('./constant'),\n    helper = require('./helper');\n\nfunction Builder(namespace, prefix) {\n  if (!_.isEmpty(namespace)) {\n    this._prefix = util.format('%s:%s', namespace.replace(/:+$/, ''), prefix);\n  } else {\n    this._prefix = prefix;\n  }\n}\n\nBuilder.prototype.stateActiveKey = function (type) {\n  assert(_.isString(type) && !_.isEmpty(type), '\"type\" must be a non-empty string.');\n\n  return util.format('%s:state:%s:%s', this._prefix, C.STATE.ACTIVE, type);\n};\n\nBuilder.prototype.stateCompleteKey = function (type) {\n  assert(_.isString(type) && !_.isEmpty(type), '\"type\" must be a non-empty string.');\n\n  return util.format('%s:state:%s:%s', this._prefix, C.STATE.COMPLETE, type);\n};\n\nBuilder.prototype.stateFailedKey = function (type) {\n  assert(_.isString(type) && !_.isEmpty(type), '\"type\" must be a non-empty string.');\n\n  return util.format('%s:state:%s:%s', this._prefix, C.STATE.FAILED, type);\n};\n\nBuilder.prototype.stateInactiveKey = function (type) {\n  assert(_.isString(type) && !_.isEmpty(type), '\"type\" must be a non-empty string.');\n\n  return util.format('%s:state:%s:%s', this._prefix, C.STATE.INACTIVE, type);\n};\n\nBuilder.prototype.stateProcessingKey = function (type) {\n  assert(_.isString(type) && !_.isEmpty(type), '\"type\" must be a non-empty string.');\n\n  return util.format('%s:state:%s:%s', this._prefix, C.STATE.PROCESSING, type);\n};\n\nBuilder.prototype.stateScore = function (priority, timestamp) {\n  assert(_.isNumber(priority) && priority === parseInt(priority, 10), '\"priority\" must be an integer.');\n  assert(_.isNumber(timestamp) && timestamp === parseInt(timestamp, 10), '\"timestamp\" must be an integer.');\n\n  return util.format('%d.%d', priority, timestamp);\n};\n\nBuilder.prototype.stateChangeChannel = function () {\n  return util.format('%s:state:change', this._prefix);\n};\n\nBuilder.prototype.taskKey = function (taskId) {\n  assert(_.isString(taskId) && !_.isEmpty(taskId), '\"taskId\" must be a non-empty string.');\n\n  return util.format('%s:task:%s', this._prefix, taskId);\n};\n\nBuilder.prototype.tempKey = function () {\n  return util.format('%s:temp:%s', this._prefix, helper.genId());\n};\n\nBuilder.prototype.workerName = function (workerId) {\n  assert(_.isString(workerId) && !_.isEmpty(workerId), '\"workerId\" must be a non-empty string.');\n\n  return util.format('%s:worker:pub:%s', this._prefix, workerId);\n};\n\nBuilder.prototype.workerSubName = function (workerId) {\n  assert(_.isString(workerId) && !_.isEmpty(workerId), '\"workerId\" must be a non-empty string.');\n\n  return util.format('%s:worker:sub:%s', this._prefix, workerId);\n};\n\n// Public API\nexports = module.exports = Builder;\n","/home/travis/build/npmtest/node-npmtest-barbeque/node_modules/barbeque/lib/helper.js":"/*\n * lib/helper.js\n */\n\n'use strict';\n\nvar _ = require('lodash'),\n    uuid = require('uuid');\n\nfunction flattenDot(multiLevelObject) {\n  return _.reduce(multiLevelObject, function (result, val, key) {\n    var flatObject;\n    if (_.isPlainObject(val)) {\n      flatObject = flattenDot(val);\n      _.forEach(flatObject, function (flatVal, flatKey) {\n        result[key + '.' + flatKey] = flatVal;\n      });\n      delete result[key];\n    } else {\n      flatObject = val;\n      result[key] = flatObject;\n    }\n    return result;\n  }, {});\n}\n\nfunction genId() {\n  return uuid.v4().replace(/-/g, '');\n}\n\n// Public API\nexports.flattenDot = flattenDot;\nexports.genId = genId;\n","/home/travis/build/npmtest/node-npmtest-barbeque/node_modules/barbeque/lib/task.js":"/*\n * lib/task.js\n */\n\n'use strict';\n\nvar assert = require('assert');\n\nvar _ = require('lodash'),\n    async = require('async'),\n    redis = require('redis');\n\nvar C = require('./constant'),\n    helper = require('./helper');\n\nfunction Task(bbq, type, data) {\n  this._bbq = bbq;\n  this._client = null;\n  this._data = data;\n  this._attempts = C.DEFAULT_TASK_ATTEMPTS;\n  this._priority = C.PRIORITY.NORMAL;\n  this._progress = 0;\n  this._saved = false;\n  this._state = C.STATE.ACTIVE;\n  this._ttl = 0;\n  this._type = type;\n  this._onConnectListeners = [];\n}\n\nTask.prototype._connect = function (cb) {\n  var self = this,\n      config = self._bbq._config,\n      client;\n\n  if (!self._client && config.client) {\n    self._client = config.client;\n  }\n\n  if (self._client) {\n    client = self._client;\n    if (!client.connected) {\n      return self._onConnectListeners.push(cb);\n    }\n    return cb(null, client);\n  }\n\n  client = self._client = redis.createClient(config.port, config.host);\n\n  if (config.password) {\n    client.auth(config.password, function (err) {\n      if (err) {\n        client.end();\n        return cb(err);\n      }\n    });\n  }\n\n  if (_.isFunction(cb)) {\n    self._onConnectListeners.push(cb);\n  }\n\n  client.once('connect', function () {\n    self._onConnectListeners.forEach(function (cb) {\n      cb(null, client);\n    });\n    self._onConnectListeners.length = 0;\n  });\n};\n\nTask.prototype._disconnect = function (cb) {\n  if (!this._client && !this._client.connected) {\n    return cb();\n  }\n\n  if (!this._bbq._config.client) {\n    this._client.quit();\n  }\n\n  cb();\n};\n\nTask.prototype.attempts = function (attempts) {\n  assert(_.isNumber(attempts) && (parseInt(attempts, 10) === attempts),\n         '\"attempts\" must be an integer.');\n\n  this._attempts = attempts;\n\n  return this;\n};\n\nTask.prototype.priority = function (priority) {\n  assert(_.isString(priority) || (_.isNumber(priority) && priority === parseInt(priority, 10)),\n         '\"priority\" must be either string or an integer.');\n\n  if (_.isString(priority)) {\n    assert(_.has(C.PRIORITY, priority.toUpperCase()), 'Unknown task priority - ' + priority);\n    priority = C.PRIORITY[priority.toUpperCase()];\n  }\n\n  this._priority = priority;\n\n  return this;\n};\n\nTask.prototype.save = function (cb) {\n  var self = this,\n      builder = self._bbq._builder;\n\n  if (self._saved) {\n    return cb(new Error('Task already saved.'));\n  }\n\n  self._connect(function (err, client) {\n    if (err) { return cb(err); }\n\n    async.series([\n      function (cb) {\n        var currentTime = Date.now();\n\n        var task = {\n          id: helper.genId(),\n          state: self._state,\n          type: self._type,\n          data: self._data,\n          attempts: self._attempts,\n          priority: self._priority,\n          progress: self._progress,\n          createdAt: currentTime,\n          updatedAt: currentTime,\n          worker: '',\n          duration: -1,\n          result: {}\n        };\n\n        if (_.isUndefined(task.data)) {\n          task.data = {};\n        }\n\n        client\n          .MULTI()\n          .HMSET(\n            builder.taskKey(task.id),\n            'state', task.state,\n            'type', task.type,\n            'data', JSON.stringify(task.data),\n            'attempts', task.attempts,\n            'priority', task.priority,\n            'progress', task.progress,\n            'createdAt', task.createdAt,\n            'updatedAt', task.updatedAt,\n            'worker', task.worker,\n            'duration', task.duration,\n            'result', JSON.stringify(task.result)\n          )\n          .ZADD(\n            builder.stateActiveKey(task.type),\n            builder.stateScore(task.priority, task.createdAt),\n            task.id\n          )\n          .PUBLISH(\n            builder.stateChangeChannel(),\n            JSON.stringify(_.pick(task, 'id', 'type', 'state', 'createdAt', 'updatedAt'))\n          )\n          .EXEC(function (err, result) {\n            if (err) { return cb(err); }\n            if (_.isEmpty(result)) {\n              return cb(new Error('Failed to schedule a task.'));\n            }\n            cb();\n          });\n      },\n      function (cb) {\n        self._disconnect(cb);\n      },\n      function (cb) {\n        self._saved = true;\n        cb();\n      }\n    ], cb);\n  });\n};\n\nTask.prototype.ttl = function (ttl) {\n  assert(_.isNumber(ttl) && ttl === parseInt(ttl, 10),\n         '\"ttl\" must be an integer.');\n\n  this._ttl = parseInt(ttl, 10);\n\n  return this;\n};\n\n// Public API\nexports = module.exports = Task;\n","/home/travis/build/npmtest/node-npmtest-barbeque/node_modules/barbeque/lib/worker.js":"/*\n * lib/worker.js\n */\n\n'use strict';\n\nvar assert = require('assert'),\n    util = require('util');\n\nvar _ = require('lodash'),\n    async = require('async'),\n    redis = require('redis');\n\nvar C = require('./constant'),\n    helper = require('./helper');\n\nfunction Worker(bbq) {\n  this._bbq = bbq;\n  this._clientPub = null;\n  this._clientSub = null;\n  this._id = helper.genId();\n  this._isListener = false;\n  this._processing = false;\n  this._watchlist = {};\n  this._onConnectPubListeners = [];\n  this._onConnectSubListeners = [];\n}\n\nWorker.prototype._connectPub = function (cb) {\n  var self = this,\n      builder = self._bbq._builder,\n      config = self._bbq._config,\n      client;\n\n  if (!self._clientPub && config.client) {\n    self._clientPub = config.client;\n  }\n\n  if (self._clientPub) {\n    client = self._clientPub;\n    if (!client.connected) {\n      return self._onConnectPubListeners.push(cb);\n    }\n    return cb(null, client);\n  }\n\n  client = self._clientPub = redis.createClient(config.port, config.host);\n\n  if (config.password) {\n    client.auth(config.password, function (err) {\n      if (err) {\n        client.end();\n        return cb(err);\n      }\n    });\n  }\n\n  if (_.isFunction(cb)) {\n    self._onConnectPubListeners.push(cb);\n  }\n\n  client.once('connect', function () {\n    client.CLIENT('SETNAME', builder.workerName(self._id), function () {\n      self._onConnectPubListeners.forEach(function (cb) {\n        cb(null, client);\n      });\n      self._onConnectPubListeners.length = 0;\n    });\n  });\n};\n\nWorker.prototype._connectSub = function (cb) {\n  var self = this,\n      builder = self._bbq._builder,\n      config = self._bbq._config,\n      client;\n\n  if (self._clientSub) {\n    client = self._clientSub;\n    if (!client.connected) {\n      return self._onConnectSubListeners.push(cb);\n    }\n    return cb(null, client);\n  }\n\n  client = self._clientSub = redis.createClient(config.port, config.host);\n\n  if (config.password) {\n    client.auth(config.password, function (err) {\n      if (err) {\n        client.end();\n        return cb(err);\n      }\n    });\n  }\n\n  if (_.isFunction(cb)) {\n    self._onConnectSubListeners.push(cb);\n  }\n\n  client.on('message', function () {\n    self._onMessage.apply(self, arguments);\n  });\n\n  client.once('connect', function () {\n    client.CLIENT('SETNAME', builder.workerSubName(self._id), function () {\n      self._onConnectSubListeners.forEach(function (cb) {\n        cb(null, client);\n      });\n      self._onConnectSubListeners.length = 0;\n    });\n\n    client.SUBSCRIBE(builder.stateChangeChannel(), function (err) {\n      if (err) { return cb(err); }\n    });\n  });\n};\n\nWorker.prototype._disconnectPub = function (cb) {\n  if (!this._clientPub && !this._clientPub.connected) {\n    return cb();\n  }\n\n  if (!this._bbq._config.client) {\n    this._clientPub.quit();\n  }\n\n  cb();\n};\n\nWorker.prototype._disconnectSub = function (cb) {\n  if (!this._clientSub && !this._clientSub.connected) {\n    return cb();\n  }\n\n  this._clientSub.quit();\n\n  cb();\n};\n\nWorker.prototype._fetchTask = function (client, taskId, cb) {\n  var self = this,\n      task;\n\n  client.HGETALL(self._bbq._builder.taskKey(taskId), function (err, result) {\n    if (err) { return cb(err); }\n\n    task = result;\n    task.id = taskId;\n    task.data = JSON.parse(task.data);\n    task.attempts = parseInt(task.attempts, 10);\n    task.priority = parseInt(task.priority, 10);\n    task.progress = parseFloat(task.progress);\n    task.createdAt = parseInt(task.createdAt, 10);\n    task.updatedAt = parseInt(task.updatedAt, 10);\n\n    cb(null, task);\n  });\n};\n\nWorker.prototype._onMessage = function (channel, message) {\n  var self = this,\n      builder = self._bbq._builder;\n\n  if (channel === builder.stateChangeChannel()) {\n    self._onStateChange(JSON.parse(message));\n  }\n};\n\nWorker.prototype._onStateChange = function (task) {\n  var self = this;\n\n  if (this._isListener) {\n    return self._bbq.emit(task.state, task);\n  }\n\n  if (!_.has(self._watchlist, task.type)) { return; }\n\n  if (task.state === C.STATE.ACTIVE) {\n    self._bbq.emit('active', task);\n    self._stateChangeActiveToProcessing();\n  }\n};\n\nWorker.prototype._process = function (task, score, cb) {\n  var self = this,\n      fn = self._watchlist[task.type],\n      startTime = Date.now();\n\n  try {\n    fn({\n      id: task.id,\n      type: task.type,\n      data: task.data,\n      attempts: task.attempts,\n      priority: task.priority,\n      createdAt: new Date(task.createdAt),\n      updatedAt: new Date(task.updatedAt),\n      worker: task.worker,\n      // extra\n      create: create,\n      log: log,\n      progress: progress\n    }, function (err, result) {\n      var duration = Date.now() - startTime;\n\n      if (err) {\n        if (!(err instanceof Error)) {\n          try {\n            throw new Error('err must be an instance of Error.');\n          } catch (err) {\n            self._bbq.emit('error', err);\n          }\n        } else {\n          self._bbq.emit('error', err);\n        }\n\n        // TODO: Support attempts feature.\n\n        self._stateChangeProcessingToFailed(task, score, duration, err.message, result);\n      } else {\n        self._stateChangeProcessingToComplete(task, score, duration, result);\n      }\n\n      cb();\n    });\n  } catch (err) {\n    self._bbq.emit('error', err);\n\n    var duration = Date.now() - startTime;\n    self._stateChangeProcessingToFailed(task, score, duration, err.message);\n\n    cb();\n  }\n\n  function create() {\n    return self._bbq.create.apply(self._bbq, arguments);\n  }\n\n  function log() {\n    var msg = util.format.apply(null, arguments);\n\n    // TODO: Update DB\n\n    self._bbq.emit('log', task, msg);\n  }\n\n  function progress(completed, total) {\n    var percent = completed / total * 100;\n\n    // TODO: Update DB\n\n    self._bbq.emit('progress', task, percent);\n  }\n};\n\nWorker.prototype._stateChangeActiveToProcessing = function () {\n  var self = this,\n      builder = self._bbq._builder,\n      client,\n      task,\n      taskId,\n      taskScore;\n\n  if (self._processing) { return; }\n\n  self._processing = true;\n\n  async.series([\n    function (cb) {\n      self._connectPub(function (err, result) {\n        client = result;\n        cb.apply(this, arguments);\n      });\n    },\n    function (cb) {\n      var tempKey = builder.tempKey();\n      var zunionstoreArgs = [\n        tempKey,\n        _.size(self._watchlist)\n      ];\n      _.each(self._watchlist, function (fn, type) {\n        zunionstoreArgs.push(builder.stateActiveKey(type));\n      });\n      client\n        .MULTI()\n        .ZUNIONSTORE(zunionstoreArgs)\n        .ZRANGE(tempKey, 0, 0, 'WITHSCORES')\n        .DEL(tempKey)\n        .EXEC(function (err, result) {\n          if (err) { return cb(err); }\n          if (_.isEmpty(result) || _.isEmpty(result[1])) {\n            // Active task not found. STOP.\n            self._processing = false;\n            return;\n          }\n          taskId = result[1][0];\n          taskScore = result[1][1];\n          cb();\n        });\n    },\n    function (cb) {\n      client.WATCH(builder.taskKey(taskId), cb);\n    },\n    function (cb) {\n      self._fetchTask(client, taskId, function (err, result) {\n        if (err) { return cb(err); }\n        task = result;\n        cb();\n      });\n    },\n    function (cb) {\n      _.assign(task, {\n        state: C.STATE.PROCESSING,\n        updatedAt: Date.now(),\n        worker: self._id\n      });\n\n      client\n        .MULTI()\n        .ZREM(builder.stateActiveKey(task.type), taskId)\n        .ZADD(builder.stateProcessingKey(task.type), taskScore, taskId)\n        .HMSET([\n          builder.taskKey(taskId),\n          'state', task.state,\n          'updatedAt', task.updatedAt,\n          'worker', task.worker\n        ])\n        .PUBLISH([\n          builder.stateChangeChannel(),\n          JSON.stringify(_.pick(task, 'id', 'type', 'state', 'createdAt', 'updatedAt', 'worker'))\n        ])\n        .EXEC(function (err, result) {\n          if (err) { return cb(err); }\n          if (_.isEmpty(result)) {\n            // Task state could not change from \"active\" to \"processing.\n            // Try again. The next time a different task id will be chosen if exists.\n            self._processing = false;\n            return self._stateChangeActiveToProcessing();\n          }\n          cb();\n        });\n    },\n    function (cb) {\n      self._bbq.emit('processing', task);\n      cb();\n    },\n    function (cb) {\n      self._process(task, taskScore, cb);\n    }\n  ], function (err) {\n    self._processing = false;\n    if (err) {\n      return console.error(err.message);\n    } else {\n      self._stateChangeActiveToProcessing();\n    }\n  });\n};\n\nWorker.prototype._stateChangeProcessingToComplete = function (task, score, duration, result) {\n  var self = this,\n      builder = self._bbq._builder,\n      client;\n\n  async.series([\n    function (cb) {\n      self._connectPub(function (err, result) {\n        client = result;\n        cb.apply(this, arguments);\n      });\n    },\n    function (cb) {\n      client.WATCH(builder.taskKey(task.id), cb);\n    },\n    function (cb) {\n      self._fetchTask(client, task.id, function (err, fetchedTask) {\n        if (err) { return cb(err); }\n        task = fetchedTask;\n        cb();\n      });\n    },\n    function (cb) {\n      _.assign(task, {\n        state: C.STATE.COMPLETE,\n        updatedAt: Date.now(),\n        worker: self._id,\n        duration: duration,\n        result: result\n      });\n\n      client\n        .MULTI()\n        .ZREM(builder.stateProcessingKey(task.type), task.id)\n        .ZADD(builder.stateCompleteKey(task.type), score, task.id)\n        .HMSET([\n          builder.taskKey(task.id),\n          'state', task.state,\n          'updatedAt', task.updatedAt,\n          'worker', task.worker,\n          'duration', task.duration,\n          'result', JSON.stringify(task.result)\n        ])\n        .PUBLISH([\n          builder.stateChangeChannel(),\n          JSON.stringify(_.pick(task, 'id', 'type', 'state', 'createdAt', 'updatedAt', 'worker', 'duration', 'result'))\n        ])\n        .EXEC(function (err, result) {\n          if (err) { return cb(err); }\n          if (_.isEmpty(result)) {\n            // Task state could not change from \"processing\" to \"complete\". Try again.\n            // return self._stateChangeProcessingToComplete(task, score, duration, result);\n          }\n          cb();\n        });\n    },\n    function (cb) {\n      self._bbq.emit('complete', task);\n      cb();\n    }\n  ], function (err) {\n    if (err) { return console.error(err.message); }\n  });\n};\n\nWorker.prototype._stateChangeProcessingToFailed = function (task, score, duration, errMsg, errResult) {\n  var self = this,\n      builder = self._bbq._builder,\n      client;\n\n  async.series([\n    function (cb) {\n      self._connectPub(function (err, result) {\n        client = result;\n        cb.apply(this, arguments);\n      });\n    },\n    function (cb) {\n      client.WATCH(builder.taskKey(task.id), cb);\n    },\n    function (cb) {\n      self._fetchTask(client, task.id, function (err, fetchedTask) {\n        if (err) { return cb(err); }\n        task = fetchedTask;\n        cb();\n      });\n    },\n    function (cb) {\n      _.assign(task, {\n        state: C.STATE.FAILED,\n        updatedAt: Date.now(),\n        worker: self._id,\n        duration: duration,\n        result: {\n          error: errMsg,\n          result: errResult\n        }\n      });\n\n      client\n        .MULTI()\n        .ZREM(builder.stateProcessingKey(task.type), task.id)\n        .ZADD(builder.stateFailedKey(task.type), score, task.id)\n        .HMSET([\n          builder.taskKey(task.id),\n          'state', task.state,\n          'updatedAt', task.updatedAt,\n          'worker', task.worker,\n          'duration', task.duration,\n          'result', JSON.stringify(task.result)\n        ])\n        .PUBLISH([\n          builder.stateChangeChannel(),\n          JSON.stringify(_.pick(task, 'id', 'type', 'state', 'createdAt', 'updatedAt', 'worker', 'duration', 'result'))\n        ])\n        .EXEC(function (err, result) {\n          if (err) { return cb(err); }\n          if (_.isEmpty(result)) {\n            // Task state could not change from \"processing\" to \"failed\". Try again.\n            // return self._stateChangeProcessingToFailed(task, score, duration, errMsg, errResult);\n          }\n          cb();\n        });\n    },\n    function (cb) {\n      self._bbq.emit('failed', task);\n      cb();\n    }\n  ], function (err) {\n    if (err) { return console.error(err.message); }\n  });\n};\n\nWorker.prototype.listen = function () {\n  var self = this;\n\n  this._isListener = true;\n\n  self._connectSub();\n};\n\nWorker.prototype.watch = function (type, fn, skipProcess) {\n  assert(!_.has(this._watchlist, type), 'Already watching - ' + type);\n\n  var self = this;\n\n  self._watchlist[type] = fn;\n\n  async.parallel([\n    function (cb) {\n      self._connectPub(cb);\n    },\n    function (cb) {\n      self._connectSub(cb);\n    }\n  ], function (err) {\n    if (err) { return console.error(err.message); }\n    if (!skipProcess) {\n      self._stateChangeActiveToProcessing();\n    }\n  });\n};\n\n// Public API\nexports = module.exports = Worker;\n","/home/travis/build/npmtest/node-npmtest-barbeque/node_modules/barbeque/admin/index.js":"/*\n * admin/index.js\n */\n\n'use strict';\n\n// Public API\nexports = module.exports = require('./app');\n"}